---
#---------------------------------------------------
#  Hosts instance  Creation
#---------------------------------------------------
- name: Add node instances to Ansible Hosts File
  lineinfile:
    path: "{{ inventory_working_dir }}/hosts"
    insertafter: '^\[nodes\]'
    line: "{{workshop_prefix}}.[0:{{ number_nodes | int - 1 }}].{{ domain_name }}"
  tags:
    - tf_create

- name: Add node instnces to inventory
  add_hosts:
    name: "{{ item }}"
    groups: nodes
  with_items: "{{workshop_prefix}}.[0:{{ number_nodes | int - 1 }}].{{ domain_name }}"
#---------------------------------------------------
#  SSH Key
#---------------------------------------------------
- stat:
    path: "{{ terraform_working_dir }}/{{ os_key_name }}"
  register: terraform_ssh_key

- name: Check for existing key and remove
  os_keypair:
    cloud: openstack
    name: "{{ os_key_name }}"
    region_name: "{{ os_region }}"
    state: absent
  when: terraform_ssh_key.stat.exists == false
  tags:
    - tf_create

- name: Create openstack keypair
  os_keypair:
    cloud: openstack
    name: "{{ os_key_name }}"
    region_name: "{{ os_region }}"
    state: present
  register: openstack_key
  when: terraform_ssh_key.stat.exists == false
  tags:
    - tf_create

- debug:
    var: openstack_key
  tags:
    - tf_create

- name: Make temporary location to run Terraform
  file:
    path: "{{ terraform_working_dir }}"
    state: directory
  tags:
    - tf_create

- name: Create ssh keypair
  copy:
    content: "{{ openstack_key.key.private_key }}"
    dest: "{{ terraform_working_dir }}/{{ os_key_name }}"
    mode: 0400
  when: terraform_ssh_key.stat.exists == false
  tags:
    - tf_create

#---------------------------------------------------
# Terraform.io
#---------------------------------------------------
- name: Template Terraform files locally to run
  template: dest="{{ terraform_working_dir }}/openstack.tf"  src=openstack.tf.j2
  tags:
    - tf_create

# - name: Template terraform.tfvars
#   template: dest="{{ terraform_working_dir }}/terraform.tfvars"  src=terraform.tfvars.j2
#   tags:
#     - tf_create

- name: Template infra-user-data
  template: dest="{{ terraform_working_dir }}/user-data.txt"  src=user-data.txt.j2
  tags:
    - tf_create

- name: Check Terraform version
  shell: terraform version
  register: tf
  changed_when: false

- set_fact:
    tf_version: "{{ tf.stdout_lines[0] | regex_replace('^Terraform.*v') }}"

- name: Initialize Terraform to discover plugins
  command: terraform init
  args:
    chdir: "{{ terraform_working_dir }}"
  when: tf_version is version('0.10.0', '>=')
  tags:
    - tf_create

- name: Create infrastructure using Terraform
  terraform:
    project_path: "{{ terraform_working_dir }}"
# NOTE: force_init will be supported with Ansible 2.6
#    force_init: yes
    state: present
  register: terraform_template_output
  tags:
    - tf_create

- debug:
    msg: "{{ terraform_template_output }}"
  tags:
    - tf_create
