# LAUNCH TOWER IN AMAZON EC2 (Public Tower Image)
# ------------------------------------------------
# EC2 Region  Location      AMI TYPE  AMI ID    
# us-east-1   N. Virginia   PV        ami-a86614bf
# us-west-1   N. California PV        ami-cdd79aad
# us-west-2   Oregon        PV        ami-028f5e62

#----------------------------------------------
# Variables
#----------------------------------------------
variable "aws_access_key" {}
variable "aws_secret_key" {}
#----------------------------------------------
# API Keys
#----------------------------------------------
provider "openstack" {
    cloud = "{{ os_cloud }}"
}
#----------------------------------------------
# get image id based on name 
#----------------------------------------------
data "openstack_images_image_v2" "image" {
  name        = "{{ os_image_name }}"
  most_recent = true

  properties = {
    key = "value"
  }
}
output "image_id" {
  value = data.openstack_images_image_v2.image.id
}
#----------------------------------------------
# get external network based on name
#----------------------------------------------
data "openstack_networking_network_v2" "external-network" {
  name = "{{ os_external_network_name }}"
}
output "external-network_id" {
  value = data.openstack_networking_network_v2.external-network.id
}
#----------------------------------------------
# external floating ip
#----------------------------------------------
# public external floating ip.
resource "openstack_networking_floatingip_v2" "floatingip" {
  pool = "{{ os_external_network_name }}"
  description = "{{ workshop_prefix }}-external-floatingip"
}
output "public_ip" {
  value = openstack_networking_floatingip_v2.floatingip.address
}
#----------------------------------------------
# router
#----------------------------------------------
# router from public to private subnet.
resource "openstack_networking_router_v2" "router" {
  name                = "{{ os_router_name }}"
  external_network_id = data.openstack_networking_network_v2.external-network.id
}
output "openstack_networking_router_v2_router" {
  value = "Completed ${openstack_networking_router_v2.router.name}"
}
#----------------------------------------------
# private network
#----------------------------------------------
resource "openstack_networking_network_v2" "private-network" {
  name           = "{{ os_private_network_name }}"
  admin_state_up = "true"
}
output "openstack_networking_network_v2_private-network" {
  value = "Completed ${openstack_networking_network_v2.private-network.name}"
}
#----------------------------------------------
# private subnet
#----------------------------------------------
resource "openstack_networking_subnet_v2" "private-subnet" {
  depends_on      = [openstack_networking_network_v2.private-network]
  name            = "{{ os_private_subnet_name }}"
  network_id      = openstack_networking_network_v2.private-network.id
  cidr            = "{{ os_cidr }}"
  dns_nameservers = ["{{ os_infra_instance_private_ip }}","8.8.8.8","8.8.4.4"]
  ip_version      = 4
}
output "openstack_networking_network_v2_subnet" {
  value = "Completed {{ workshop_prefix }}-containers-101-subnet"
}
#----------------------------------------------
# router interface to private subnet
#----------------------------------------------
resource "openstack_networking_router_interface_v2" "router_interface" {
  depends_on = [openstack_networking_router_v2.router,openstack_networking_subnet_v2.private-subnet]
  router_id = openstack_networking_router_v2.router.id
  subnet_id = openstack_networking_subnet_v2.private-subnet.id
}
output "openstack_networking_router_interface_v2_router_interface" {
  value = "Completed {{ workshop_prefix }}-router_interface"
}
#----------------------------------------------
# security group
#----------------------------------------------
resource "openstack_compute_secgroup_v2" "secgroup" {
  name        = "{{ os_sg_name }}"
  description = "{{ os_sg_name }}"

{% for port in os_sg_ports %}
  rule {
    from_port   = {{ port }}
    to_port     = {{ port }}
    ip_protocol = "tcp"
    cidr        = "0.0.0.0/0"
  }
{% endfor %}

}
output "openstack_compute_secgroup_v2_secgroup" {
  value = "Completed ${openstack_compute_secgroup_v2.secgroup.name}"
}
#----------------------------------------------
# infra instance
#----------------------------------------------
resource "openstack_compute_instance_v2" "infra" {
  depends_on      = [openstack_networking_subnet_v2.private-subnet,openstack_compute_secgroup_v2.secgroup]
  name            = "{{ os_infra_instance_name }}"
  flavor_name     = "{{ os_flavor_name }}"
  key_pair        = "{{ os_key_name }}"
  security_groups = ["${openstack_compute_secgroup_v2.secgroup.name}"]
  user_data       = file("infra-user-data.txt")

  block_device {
    uuid                  = data.openstack_images_image_v2.image.id
    source_type           = "image"
    volume_size           = "{{ ebs_root_block_size }}"
    boot_index            = 0
    destination_type      = "volume"
    delete_on_termination = true
  }

  metadata = {
    Workshop = "{{ workshop_prefix }}"
    sshUser  = "{{ workshop_user }}"
  }

  network {
    name = openstack_networking_network_v2.private-network.name
    fixed_ip_v4 = "{{ os_infra_instance_private_ip }}"
  }

}
output "openstack_compute_instance_v2_infra" {
  value = "Completed ${openstack_compute_instance_v2.infra.name}"
}

resource "openstack_compute_floatingip_associate_v2" "external_ip" {
  depends_on  = [openstack_networking_floatingip_v2.floatingip,openstack_compute_instance_v2.infra]
  floating_ip = openstack_networking_floatingip_v2.floatingip.address
  instance_id = openstack_compute_instance_v2.infra.id
  fixed_ip    = openstack_compute_instance_v2.infra.network.0.fixed_ip_v4
}

provider "aws" {
    access_key = "{{ aws_access_key }}"
    secret_key = "{{ aws_secret_key }}"
    region     = "{{ aws_region }}"
}

data "aws_route53_zone" "selected" {
  name         = "{{ aws_route53_zone_name }}"
}

resource "aws_route53_record" "infra" {
  zone_id = data.aws_route53_zone.selected.id                       
  name = "{{ os_infra_instance_name }}"
  type = "A"
  ttl = "300"
  # matches up record N to instance N
  records = ["${openstack_compute_instance_v2.infra.public_ip}"]
 }
output "aws_route53_record_infra" {
  value = "Completed Adding Route53 Record ${aws_route53_record.infra.name}"
}

output "aws_route53_zone_selected" {
  value = data.aws_route53_zone.selected
}
# #----------------------------------------------
# # workshop node instances
# #----------------------------------------------
# resource "openstack_compute_instance_v2" "nodes" {
#   depends_on      = [openstack_networking_subnet_v2.private-subnet,openstack_compute_secgroup_v2.secgroup]
#   count           = var.number_nodes
#   name            = "{{ workshop_prefix }}.${count.index}.{{ domain_name }}"
#   flavor_name     = "{{ os_flavor_name }}"
#   key_pair        = "{{ workshop_prefix }}-containers"
#   security_groups = ["${openstack_compute_secgroup_v2.secgroup.name}"]
#   user_data       = file("node-user-data.txt")

#   block_device {
#     uuid                  = openstack_images_image_v2.image.id
#     source_type           = "image"
#     volume_size           = "{{ ebs_root_block_size }}"
#     boot_index            = 0
#     destination_type      = "volume"
#     delete_on_termination = true
#   }

#   metadata = {
#     Workshop = "{{ workshop_prefix }}"
#     sshUser  = "{{ workshop_user }}"
#     Index    = count.index
#   }

#   network {
#     name = openstack_networking_network_v2.private-network.name
#   }

#   # tags = [
#   #   "index_${count.index}",
#   #   "workshop_fierce-test",
#   #   "sshuser_cloud-user"
#   # ]

# }
# output "openstack_compute_instance_v2_nodes" {
#   value = "Completed {{ workshop_prefix }}-nodes"
# }